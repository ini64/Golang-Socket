// automatically generated by the FlatBuffers compiler, do not modify

package Server

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SSEnter struct {
	_tab flatbuffers.Table
}

func GetRootAsSSEnter(buf []byte, offset flatbuffers.UOffsetT) *SSEnter {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SSEnter{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SSEnter) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SSEnter) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SSEnter) AccountID() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SSEnter) MutateAccountID(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *SSEnter) Pos(obj *Vec3) *Vec3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vec3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SSEnter) Rot(obj *Qua) *Qua {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Qua)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SSEnter) Time() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *SSEnter) MutateTime(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func SSEnterStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SSEnterAddAccountID(builder *flatbuffers.Builder, accountID int32) {
	builder.PrependInt32Slot(0, accountID, 0)
}
func SSEnterAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(pos), 0)
}
func SSEnterAddRot(builder *flatbuffers.Builder, rot flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(rot), 0)
}
func SSEnterAddTime(builder *flatbuffers.Builder, time float32) {
	builder.PrependFloat32Slot(3, time, 0.0)
}
func SSEnterEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

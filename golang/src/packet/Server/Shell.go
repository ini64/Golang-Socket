// automatically generated by the FlatBuffers compiler, do not modify

package Server

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Shell struct {
	_tab flatbuffers.Struct
}

func (rcv *Shell) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Shell) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Shell) Num() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Shell) MutateNum(n int32) bool {
	return rcv._tab.MutateInt32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *Shell) Pos(obj *Vec3) *Vec3 {
	if obj == nil {
		obj = new(Vec3)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+4)
	return obj
}
func (rcv *Shell) Rot(obj *Qua) *Qua {
	if obj == nil {
		obj = new(Qua)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+16)
	return obj
}
func (rcv *Shell) Force() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(32))
}
func (rcv *Shell) MutateForce(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(32), n)
}

func (rcv *Shell) Time() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(36))
}
func (rcv *Shell) MutateTime(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(36), n)
}

func CreateShell(builder *flatbuffers.Builder, num int32, pos_x float32, pos_y float32, pos_z float32, rot_x float32, rot_y float32, rot_z float32, rot_w float32, force float32, time float32) flatbuffers.UOffsetT {
	builder.Prep(4, 40)
	builder.PrependFloat32(time)
	builder.PrependFloat32(force)
	builder.Prep(4, 16)
	builder.PrependFloat32(rot_w)
	builder.PrependFloat32(rot_z)
	builder.PrependFloat32(rot_y)
	builder.PrependFloat32(rot_x)
	builder.Prep(4, 12)
	builder.PrependFloat32(pos_z)
	builder.PrependFloat32(pos_y)
	builder.PrependFloat32(pos_x)
	builder.PrependInt32(num)
	return builder.Offset()
}
